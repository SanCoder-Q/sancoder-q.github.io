#+STARTUP: showall indent
#+STARTUP: hidestars
#+BEGIN_HTML
---
layout: post
title: Learning Haskell (WIP)
---
#+END_HTML

* COMMENT Requirement

#+BEGIN_SRC emacs-lisp
(require 'ob-haskell)
#+END_SRC

#+RESULTS:
: ob-haskell

* Environment Install
** Dependencies
Glasgow Haskell Compiler (GHC) - The compiler for Haskell.
Cabal - Package description format.
Stack - Package management tool.

** Get Start
#+BEGIN_SRC shell
brew update # upgrade HomeBrew
brew install haskell-stack # install package management tool Stack
stack new # download Haskell runtime environment
#+END_SRC

** Emacs Haskell-mode
#+BEGIN_SRC shell
M-x package-refresh-contents
M-x package-install RET haskell-mode
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq haskell-program-name "GHCI_PATH")
#+END_SRC

** Haskell Test
#+BEGIN_SRC haskell
putStrLn "Hello World"
92 `div` 13
#+END_SRC

* Haskell Features
- Referential Transparency
- Type Inference
- Lazy
- Statically Typed

* Basic Rules

** Define and Evaluate Function
#+BEGIN_SRC haskell
let f x = 1 + x -- Same as define ~f~ in a file and load it using :l
f 2 -- 3
#+END_SRC

** If Expression
#+BEGIN_SRC haskell
let double'Small'Num x = (if x > 100 then x else 2 * x) + 1
double'Small'Num 101 -- 102
#+END_SRC

** List
#+BEGIN_SRC haskell
1 : [2,3] ++ [4,5] ++ [] -- [1,2,3,4,5]
('H' : "ello" ++ " " ++ "World") !! 1 -- 'e'
[3,2,1] <= [3,2,2] -- True
let l = [1,2,3,4]
(tail l) ++ [head l] -- [4,1,2,3]
(last l) : (init l) -- [4,1,2,3]
length l -- 4
null [] -- True
reverse l -- [4,3,2,1]
take 2 l -- [1,2]
drop 2 l -- [3,4]
maximum l -- 4
sum l -- 10
product l -- 24
5 `elem` l -- False
#+END_SRC

** Range
#+BEGIN_SRC haskell
[1..4] -- [1,2,3,4]
['a'..'d'] -- "abcd"
[1,3..7] -- [1,3,5,7]
[13,26..4*13] -- [13,26,39,52]
#+END_SRC

** List Comprehension
#+BEGIN_SRC haskell
[ x*2 | x<-[1..3], x/=2 ] -- [2,6]
let xxs = [[1..3], [2..4], [3..5]]
[[x | x <- xs, even x] | xs <- xxs] -- [[2], [2,4], [4]]
[x+y | x <- [1..3], y <- [2..5]] -- [3,4,5,6,4,5,6,7,5,6,7,8]
#+END_SRC

** Tuple
