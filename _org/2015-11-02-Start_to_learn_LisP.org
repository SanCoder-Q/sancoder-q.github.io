#+STARTUP: entitiespretty
#+STARTUP: showall indent
#+STARTUP: hidestars
#+OPTIONS: \n:t
#+BEGIN_HTML
---
layout: post
title: Start to learn LisP
---
#+END_HTML

* COMMENT requirement

#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(require 'ob-scheme)
#+END_SRC

#+RESULTS:
: ob-scheme

* Content
- [[Why LisP]]
- [[Rules of LisP]]
  - [[表达式与组合式]]
  - [[命名 α-Conversion]]
  - [[替换 β-Reduction]]
  - [[条件与谓词]]
  - [[Abstration of procedures 过程抽象]]



* Why LisP

因为 LisP 有着：
- 简单的语法规则
- 众多的方言（Emacs LisP, Scheme, Clojure, Guile）
- 对函数式的良好支持
- 天然的 λ演算语言
- 一本 NB 的书（SICP）

* Rules of LisP

*** 表达式与组合式
#+BEGIN_SRC scheme

(+ 1 3)
#+END_SRC

#+RESULTS:
: 4

#+BEGIN_SRC scheme
(+ 1 2)
#+END_SRC

#+BEGIN_SRC scheme
(+ 1 (+ 1 1))
#+END_SRC

#+RESULTS:
: 3

*** 命名 α-Conversion
#+BEGIN_SRC scheme
(define (f x) (+ x x))
(f 1)
#+END_SRC

#+RESULTS:
: 2

LisP 使用应用序而非正则序来对组合式求值

*** 替换 β-Reduction

#+BEGIN_SRC scheme
((lambda (x) (+ x x)) 1)
#+END_SRC

#+RESULTS:
: 2

*** 条件与谓词

条件谓词判断语法: *cond*
#+BEGIN_SRC scheme
(cond (<predicate> <expression>)
      (<predicate> <expression>)
      ...
      [(else <expression>)])
#+END_SRC

#+BEGIN_SRC scheme
  (define (abs x)
    (cond ((> x 0) x)
          ((= x 0) 0)
          (else (- x))))
  (abs -3)
#+END_SRC

#+RESULTS:
: 3

条件谓词判断语法: *if*
#+BEGIN_SRC scheme
(if <predicate> <consequent> <alternative>)
#+END_SRC

#+BEGIN_SRC scheme
  (define (abs x)
    (if (< x 0) (- x) x))
  (abs -3)
#+END_SRC

#+RESULTS:
: 3

逻辑运算符: *and* *or* *not*
#+BEGIN_SRC scheme
(and <expression> ... <expression>)
(or <expression> ... <expression>)
(not <expression>)
#+END_SRC

#+BEGIN_SRC scheme
    ((lambda (x y) (and x y)) 1 1)
#+END_SRC

#+RESULTS:
: 1

#+BEGIN_SRC scheme
    ((lambda (x y) (or x y)) 1 0)
#+END_SRC

#+RESULTS:
: 1

#+BEGIN_SRC scheme
    ((lambda (x) (not x)) (> 1 0))
#+END_SRC

#+RESULTS:
: #f
*** Abstration of procedures 过程抽象
- Local
  - Bound Variable 约束变量
  - Free Variable 自由变量
  - Captured Variable 被捕获变量
- Internal Definitions
下方代码的过程 =bar= 被称为 *内部定义过程* , 这种结构被称为 *块结构(Block Structure)*:
#+BEGIN_SRC scheme
  (define (foo)
    (define (bar) 2)
    (bar))
  (foo)
#+END_SRC

#+RESULTS:
: 2
可以定义 *词法作用域(Lexical Scoping)*:
#+BEGIN_SRC scheme
  (define (foo x)
    (define (bar) (+ 2 x))
    (bar))
  (foo 2)
#+END_SRC

#+RESULTS:
: 4
** Procedure & Process
过程是一种处理过程的演化(Procedure is a pattern for the local evolution of a computational process.)
*** Linear Recursion and Iteration
- 线性递归处理 Linear Recursion Process (*NOT Procedure!!*)
#+BEGIN_SRC scheme
  (define (factorial n)
    (if (= n 1)
        1
        (* n (factorial (- n 1)))))
  (factorial 3)
#+END_SRC

#+RESULTS:
: 6

- 线性迭代处理 Linear Iteration Process (*NOT Procedure!!*)
#+BEGIN_SRC scheme
  (define (fact-iter c i n)
    (if (> i n)
        c
        (fact-iter (* c i) (+ i 1) n)))

  (define (factorial n)
    (fact-iter 1 1 n))

  (factorial 3)
#+END_SRC

#+RESULTS:
: 6

过程 (Procedure) 描述的是语法形式的事实, 一个递归过程 (Recursion Procedure) 指的是过程的定义中直接或间接的引用了该过程本身。
处理 (Process) 描述的是计算的进展方式。一个递归的过程很可能是以一种迭代进展方式处理的，也就是 *尾递归 (Tail-Recursion)* 的方式计算的。

*** Tree Recursion 树形递归
- Fibonacci Sequence 斐波那契数列
树形递归法:
#+BEGIN_SRC scheme
  (define (fib n)
    (cond ((= n 0) 0)
          ((= n 1) 1)
          (else (+ (fib (- n 1))
                   (fib (- n 2))))))

  (list (fib 2)
        (fib 3)
        (fib 4)
        (fib 5)
        (fib 6)
        (fib 7))
#+END_SRC

#+RESULTS:
: (1 2 3 5 8 13)

迭代递归法:
#+BEGIN_SRC scheme
  (define (iter-fib c lc n)
    (if (= n 0)
        lc
        (iter-fib (+ c lc)
                  c
                  (- n 1))))
  (define (fib n)
    (iter-fib 1 0 n))

  (list (fib 2)
        (fib 3)
        (fib 4)
        (fib 5)
        (fib 6)
        (fib 7))
#+END_SRC

#+RESULTS:
: (1 2 3 5 8 13)

- 算法复杂度 Order
称 /\Theta(f(n))/ 为算法的 *复杂度(阶)*, 当存在与 /n/ 无关的整数k_{1}和k_{2}, 使得:
k_{1}f(n) \le \Theta(f(n)) \le k_{2}f(n)
对于任意大的 /n/ 成立.
